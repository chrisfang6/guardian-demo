apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

// types
def STRING = "String"
def HTTP_URL = "okhttp3.HttpUrl"

// fields
def REQ_ENDPOINT = "REQ_ENDPOINT"
def GUARDIAN_API_KEY = "GUARDIAN_API_KEY";

// version
def versionMajor = 1
def versionMinor = 0
def versionPatch = 0

def guardianPropertiesFile = rootProject.file("guardian.properties")
def guardianProperties = new Properties()
guardianProperties.load(new FileInputStream(guardianPropertiesFile))

android {
    compileSdkVersion 26
    buildToolsVersion "26.0.2"
    defaultConfig {
        applicationId "net.chris.demo.guardian"
        minSdkVersion 16
        targetSdkVersion 26
        versionCode 1
        versionName "${versionMajor}.${versionMinor}.${versionPatch}"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        vectorDrawables.useSupportLibrary = true
        buildConfigField HTTP_URL, REQ_ENDPOINT, HTTP_URL + '.parse(' + '\"http://content.guardianapis.com/\"' + ')'
        buildConfigField STRING, GUARDIAN_API_KEY, '\"' + guardianProperties['api_key'] + '\"'
    }
    signingConfigs {
        release {
            storeFile file(String.valueOf(System.getenv('KEYSTORE_CHRIS_GITHUB_RELEASE_FILE')))
            storePassword System.getenv('KEYSTORE_CHRIS_GITHUB_RELEASE_PASSWORD')
            keyAlias System.getenv('KEYSTORE_CHRIS_GITHUB_RELEASE_ALIAS')
            keyPassword System.getenv('KEYSTORE_CHRIS_GITHUB_RELEASE_ALIAS_PASSWORD')
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            zipAlignEnabled true
            minifyEnabled false
            debuggable true
            jniDebuggable true
            renderscriptDebuggable true
        }
        release {
            zipAlignEnabled true
            minifyEnabled false
            shrinkResources false
            debuggable false
            jniDebuggable false
            renderscriptDebuggable false
            signingConfig signingConfigs.release
//            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    dataBinding {
        enabled = true
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    packagingOptions {
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/LICENSE'
    }
}

retrolambda {
    javaVersion JavaVersion.VERSION_1_7
    jvmArgs '-noverify'
    defaultMethods true
    incremental false
}

dependencies {
    def andorid_databinding_compiler_version = "2.3.0"
    def android_support_version = '26.+'
    def auto_parcel_version = "0.3.1"
    def butterknife_version = '8.8.1'
    def dagger_version = "2.4"
    def dbflow_version = "3.0.0"
    def glassfish_javax_annotation_version = "10.0-b28"
    def lib_debug_version = '1.0.0'
    def lib_network_retrofit_version = '1.0.1'
    def picasso_version = '2.5.2'
    def rxandroid_version = '2.0.1'
    def rxjava_version = '2.1.3'
    def rxlifecycle_version = '2.0.1'
    def stetho_version = '1.5.0'
    def joda_time_version = '2.9.9'
    compile fileTree(dir: 'libs', include: ['*.jar'])
    testCompile 'junit:junit:4.12'
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
        exclude group: 'com.google.code.findbugs'
    })
    compile 'com.android.support:appcompat-v7:' + android_support_version
    compile 'com.android.support:support-v4:' + android_support_version
    compile 'com.android.support:design:' + android_support_version
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    // data binding
    annotationProcessor "com.android.databinding:compiler:${andorid_databinding_compiler_version}"
    // butterknife
    compile 'com.jakewharton:butterknife:' + butterknife_version
    annotationProcessor 'com.jakewharton:butterknife-compiler:' + butterknife_version
    // dagger2
    compile 'com.google.dagger:dagger:' + dagger_version
    annotationProcessor 'com.google.dagger:dagger-compiler:' + dagger_version
    compile 'org.glassfish:javax.annotation:' + glassfish_javax_annotation_version
    // rxjava
    compile 'io.reactivex.rxjava2:rxjava:' + rxjava_version
    compile 'io.reactivex.rxjava2:rxandroid:' + rxandroid_version
    compile 'com.trello.rxlifecycle2:rxlifecycle:' + rxlifecycle_version
    compile 'com.trello.rxlifecycle2:rxlifecycle-android:' + rxlifecycle_version
    compile 'com.trello.rxlifecycle2:rxlifecycle-components:' + rxlifecycle_version
    // picasso
    compile 'com.squareup.picasso:picasso:' + picasso_version
    // debug
    debugCompile 'com.github.chrisfang6:lib-debug:' + lib_debug_version
    // DBFlow
    annotationProcessor "com.github.Raizlabs.DBFlow:dbflow-processor:${dbflow_version}"
    compile "com.github.Raizlabs.DBFlow:dbflow-core:${dbflow_version}"
    compile "com.github.Raizlabs.DBFlow:dbflow:${dbflow_version}"
    // stetho
    compile 'com.facebook.stetho:stetho:' + stetho_version
    compile 'com.facebook.stetho:stetho-okhttp3:' + stetho_version
    // autoparcel
    compile "com.github.frankiesardo:auto-parcel:${auto_parcel_version}"
    annotationProcessor "com.github.frankiesardo:auto-parcel-processor:${auto_parcel_version}"
    // lib_network_retrofit
    compile 'com.github.chrisfang6:lib-network-retrofit:' + lib_network_retrofit_version
    // joda-time
    compile 'joda-time:joda-time:' + joda_time_version
    compile('net.danlew:android.joda:' + joda_time_version) {
        exclude group: 'joda-time', module: 'joda-time'
    }
}
